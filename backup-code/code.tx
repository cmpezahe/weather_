//  ===============BTN JS ================
const searchBarContainerEl = document.querySelector(".search-bar-container");

const magnifierEl = document.querySelector(".magnifier");

magnifierEl.addEventListener("click", () => {
  searchBarContainerEl.classList.toggle("active");
});
//  ===============BTN JS ENDS  ================

// =============== API CODE ================

const API_KEY = "b6f26a79ca773edd8d370c7c132cac30";
const API_BASE_URL = "https://api.openweathermap.org/data/2.5/weather";
// let DEFAULT_CITY = "London";
let DEFAULT_CITY = "London";

window.addEventListener("load", () => {
  // default
  getWeatherData(DEFAULT_CITY).then(displayWeatherData).catch(displayError);
});

const cityElement = document.querySelector(".weather__city");
const datetimeElement = document.querySelector(".weather__datetime");
let cityInputEl = document.getElementById("city-input");
const weatherDataEl = document.getElementById("weather-data");
const weatherBox = document.querySelector(".icon");
// cityValue.value = DEFAULT_CITY;
document.querySelector("form").addEventListener("submit", handleFormSubmit);

const resetButton = document.getElementById("-button");
resetButton.addEventListener("click", resetWeatherData);

// Display weather for the default city on page load

function handleFormSubmit(event) {
  event.preventDefault();
  const cityValue = cityInputEl.value.trim();
  let DEFAULT_CITY = "London";
  if (cityValue !== "") {
    getWeatherData(cityValue).then(displayWeatherData).catch(displayError);
  } else {
    // Display weather for the default city
    getWeatherData(DEFAULT_CITY).then(displayWeatherData).catch(displayError);
  }
}

async function getWeatherData(city) {
  const encodedCity = encodeURIComponent(city);
  const url = `${API_BASE_URL}?q=${encodedCity}&appid=${API_KEY}&units=metric&lang=en`;
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error("Unable to fetch weather data.");
  }
  return response.json();
}

function displayWeatherData(data) {
  // Destructure data object
  const { name, sys, dt, timezone, main, weather, wind } = data;

  // Convert country code using a function
  const countryCode = convertCountryCode(sys.country);

  // Select image element for weather icon
  const image = document.querySelector(".icon img");

  // Update city and datetime elements
  cityElement.textContent = `${name}, ${countryCode}`;

  //   datetimeElement.textContent = convertTimeStamp(dt, timezone);

  // Update weather icon based on weather condition
  updateWeatherIcon(weather[0].main, image);

  // Extract temperature, description, and details
  const temperature = Math.round(main.temp);
  const description = weather[0].description;
  const details = [
    `Feels like: ${Math.round(main.feels_like)}°C`,
    `Humidity: ${main.humidity}%`,
    `Wind speed: ${wind.speed} m/s`,
    `Pressure: ${main.pressure}`,
  ];
  console.log(description);

  // Update weather data elements
  const temperatureElement = weatherDataEl.querySelector(".temperature");
  const descriptionElement = weatherDataEl.querySelector(".description");
  const detailsElement = weatherDataEl.querySelector(".details");

  temperatureElement.textContent = `${temperature}°C`;
  descriptionElement.textContent = description;

  detailsElement.innerHTML = details
    .map((detail) => `<div>${detail}</div>`)
    .join("");

  // Display the weather box
  weatherBox.style.display = "block";
}

// Function to update weather icon based on condition
function updateWeatherIcon(weatherCondition, imageElement) {
  const weatherIcons = {
    Clear: "assets/images/clear.png",
    Rain: "assets/images/rain.png",
    Snow: "assets/images/snow.png",
    Clouds: "assets/images/cloud.png",
    Mist: "assets/images/mist.png",
    Haze: "assets/images/haze.png",
    Smoke: "assets/images/smoke.png",
    Broken: "assets/images/smoke.png",
  };

  // Set the image source based on the weather condition
  imageElement.src = weatherIcons[weatherCondition] || "";
}

function resetWeatherData() {
  cityInputEl.value = "";
  cityElement.textContent = "";
  datetimeElement.textContent = "";
  weatherBox.style.display = "none";
  weatherDataEl.querySelector(".temperature").textContent = "";
  weatherDataEl.querySelector(".description").textContent = "";
  weatherDataEl.querySelector(".details").innerHTML = "";
}

// ======== COUNTRY CODE ========
function convertCountryCode(countryCode) {
  const regionNames = new Intl.DisplayNames(["en"], { type: "region" });
  return regionNames.of(countryCode);
}
// ======== COUNTRY CODE ENDS ========

// function convertTimeStamp(timestamp, timezone) {
//   const date = new Date(timestamp * 1000);
//   const options = {
//     weekday: "long",
//     day: "numeric",
//     month: "long",
//     year: "numeric",
//     hour: "numeric",
//     minute: "numeric",
//     timeZone: getTimeZoneOffset(timezone),
//     hour12: true,
//   };
//   return date.toLocaleString("en-US", options);
// }

// function getTimeZoneOffset(timezone) {
//   const convertTimezone = timezone / 3600; // convert seconds to hours
//   return `Etc/GMT${convertTimezone >= 0 ? "-" : "+"}${Math.abs(
//     Math.floor(convertTimezone)
//   )}`;
// }

function displayError(error) {
  console.error(error);
  // Display error message to the user
}
